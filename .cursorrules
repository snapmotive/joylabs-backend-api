# JoyLabs Backend API v3 - Cursor Reference

## Project Overview
- Serverless backend API for JoyLabs
- Primary focus: Square OAuth integration for mobile applications
- Built with: AWS Lambda, Express.js, Serverless Framework v4
- Node.js version: 22.x (required)
- Environment: Production-only (no sandbox/test modes)

## Key Dependencies
- Serverless Framework v4.10.1
- Square SDK v42.0.0
- AWS SDK v3 (no v2.x)
- Express.js v4.18.2
- Node.js v22.x

## Architecture Components
1. Lambda Functions:
   - api: Main Express application (src/index.js)
   - catalog: Product catalog management (src/catalogHandlers.js)
   - webhooks: Square webhook handling (src/webhookHandlers.js)
   - oauth: Square OAuth flow (src/oauthHandlers.js)

2. AWS Services:
   - API Gateway
   - DynamoDB Tables:
     - States table (OAuth states)
     - Sessions table (Express sessions)
     - Users table
     - Catalog tables (products, categories)
     - Merchants table
     - Webhooks table
   - Secrets Manager (Square credentials)
   - CloudWatch (logging)

3. Lambda Layers:
   - core: Base dependencies
   - apiDeps: API-specific modules
   - catalogDeps: Catalog-specific modules
   - webhooksDeps: Webhook handling modules
   - oauthDeps: OAuth-specific modules
   - square: Square SDK and related dependencies

## Critical Configurations
- Square Redirect URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production/api/auth/square/callback
- API Base URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production
- Lambda Timeout: 29 seconds (matches API Gateway)
- Memory: 512MB per function

## Development Guidelines
1. Always use TypeScript with strict typing
2. Use AWS SDK v3 only
3. Implement proper error handling and logging
4. Ensure proper session management
5. Follow security best practices for OAuth flows
6. Use production endpoints only (no sandbox)
7. Do not push or commit to git unless asked

## Node.js 22 Security Features
1. WebCrypto API for PKCE implementation in src/utils/webCrypto.js
2. Error Cause for enhanced error tracking in src/utils/errorHandling.js
3. Native Fetch API with AbortController in src/utils/fetchHelpers.js
4. Modern cryptographic operations with better randomness

## ESLint and TypeScript Configuration
- ESLint configured to handle Node.js 22 features
- TypeScript strict mode enabled
- Husky pre-commit hooks for code quality
- Prettier integrated for consistent formatting
- Required WebCrypto types and definitions

## Common Issues and Solutions
1. Session issues: Check SESSION_SECRET environment variable
2. API rate limiting: Implement exponential backoff
3. Square credential refresh: Use src/services/square.js refreshAccessToken
4. Memory errors: Increase Lambda memory or optimize dependencies
5. Cold starts: Optimize layers and implement warming
6. TypeScript errors: Check tsconfig.json and types

## Deployment Workflow
1. Ensure all lint checks pass: `npm run lint`
2. Run local tests: `npm test`
3. Deploy layers first: `npm run deploy:layers`
4. Deploy API: `npm run deploy:function:api`
5. Verify AWS Lambda console for successful deployment
6. Check CloudWatch logs for any runtime errors

## Square's usage of camelCase vs snake_case

The Square API uses camelCase for its SDKs and Node.js API, while the API reference documentation and webhooks use snake_case. 

Here's a breakdown: 
API Reference/Webhooks: Use snake\_case (e.g., payment_status).
SDKs (including Node.js): Use camelCase (e.g., paymentStatus).
Confusion: The discrepancy between the API reference and the actual API can be confusing, as the reference uses snake\_case while the SDKs expect camelCase.

Example:
API Reference/Webhooks/JSON response: payment_status
SDK/Node.js: paymentStatus

## Square endpoints caveats:
Square's endpoints are prefixed with /v2/ and our frontend uses a url like this: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production/v2/locations or https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production/v2/merchants/list 

## API Endpoint Strategy

Despite Square using `/v2/` prefixes, we maintain a consistent approach:

1. **All JoyLabs endpoints use `/api/*` prefix**:
   - `/api/locations` - NOT `/v2/locations`
   - `/api/catalog` - NOT `/v2/catalog`
   - `/api/products` - NOT `/v2/products`

2. **Square API version handling**:
   - URL path version is managed internally with `const SQUARE_API_VERSION = 'v2'`
   - API header version is managed with `const SQUARE_API_HEADER_VERSION = '2025-03-19'`
   - This dual versioning approach separates URL structure from API behaviors

3. **Benefits**:
   - Frontend code doesn't need to change when Square updates API versions
   - Consistent API structure across our entire backend
   - Clean separation between our API and Square's version changes
   - Easier versioning control for our own API

4. **Implementation**:
   - All direct Square API calls use the version constants:
     ```javascript
     url: `https://connect.squareup.com/${SQUARE_API_VERSION}/locations`,
     headers: {
       'Square-Version': SQUARE_API_HEADER_VERSION
     }
     ```
   - SDK calls set the version via client configuration:
     ```javascript
     client.agent.defaultHeaders['Square-Version'] = SQUARE_API_HEADER_VERSION;
     ```



