# JoyLabs Backend API v3 - Cursor Reference

## Project Overview
- Serverless backend API for JoyLabs
- Primary focus: Square OAuth integration for mobile applications. Catalog endpoints act as authenticated proxies to Square.
- Built with: AWS Lambda, Express.js, Serverless Framework v4
- Node.js version: 22.x (required) - Note: Layers might be nodejs20.x temporarily.
- Environment: Production-only (no sandbox/test modes)

## Key Dependencies
- Serverless Framework v4.10.1
- Square SDK v42.0.0
- AWS SDK v3 (no v2.x)
- Express.js v4.18.2
- Node.js v22.x

## Architecture Components
1. Lambda Functions:
   - api: Main Express application for general routes (health, etc.) (src/index.js)
   - catalog: **Authenticated proxy for Square Catalog API operations** (src/catalogHandlers.js)
   - webhooks: Square webhook handling (src/webhookHandlers.js)
   - oauth: Square OAuth flow (src/oauthHandlers.js)

2. AWS Services:
   - API Gateway
   - DynamoDB Tables:
     - States table (OAuth states)
     - Sessions table (Express sessions)
     - Users table
     - Merchants table
     - Webhooks table
     - ~~Catalog tables (products, categories)~~ - No longer used for primary catalog data.
   - Secrets Manager (Square credentials)
   - CloudWatch (logging)

3. Lambda Layers:
   - core: Base dependencies
   - apiDeps: API-specific modules
   - catalogDeps: Catalog proxy handler dependencies
   - webhooksDeps: Webhook handling modules
   - oauthDeps: OAuth-specific modules
   - square: Square SDK and related dependencies

## Critical Configurations
- Square Redirect URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production/api/auth/square/callback
- API Base URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production
- Lambda Timeout: 29 seconds (matches API Gateway)
- Memory: 512MB per function

## Development Guidelines
1. Always use TypeScript with strict typing (Primary language)
2. Use AWS SDK v3 only
3. Implement proper error handling and logging
4. Ensure proper session management (especially for OAuth)
5. Follow security best practices for OAuth flows
6. Use production endpoints only (no sandbox)
7. Do not push or commit to git unless asked
8. **Catalog Logic:** The `catalog` function should only contain proxy logic (authentication, header forwarding, request/response pass-through). Do not add business logic here; interact directly with the Square API via these proxied endpoints from the frontend.

## Node.js 22 Security Features
1. WebCrypto API for PKCE implementation in src/utils/webCrypto.js
2. Error Cause for enhanced error tracking in src/utils/errorHandling.js
3. Native Fetch API with AbortController in src/utils/fetchHelpers.js
4. Modern cryptographic operations with better randomness

## ESLint and TypeScript Configuration
- ESLint configured to handle Node.js 22 features
- TypeScript strict mode enabled
- Husky pre-commit hooks for code quality
- Prettier integrated for consistent formatting
- Required WebCrypto types and definitions

## Common Issues and Solutions
1. Session issues: Check SESSION_SECRET environment variable
2. API rate limiting: Implement exponential backoff (especially on frontend if making many catalog calls)
3. Square credential refresh: Use src/services/square.js refreshAccessToken (handled via OAuth flow)
4. Memory errors: Increase Lambda memory or optimize dependencies
5. Cold starts: Optimize layers and implement warming
6. TypeScript errors: Check tsconfig.json and types
7. **Catalog Errors:** Errors from `/v2/catalog/*` endpoints are likely direct Square API errors. Check Square documentation based on the error response passed through the proxy.

## Deployment Workflow
1. Ensure all lint checks pass: `npm run lint`
2. Run local tests: `npm test`
3. Deploy layers first: `npm run deploy:layers`
4. Deploy specific function if needed: `npm run deploy:function:catalog` or `npm run deploy:function:oauth`, etc.
5. Full Deploy: `npm run deploy`
6. Verify AWS Lambda console for successful deployment
7. Check CloudWatch logs for any runtime errors

## Square's usage of camelCase vs snake_case

The Square API uses camelCase for its Node.js SDK (used internally by the backend, especially in `square.js`), while the **API reference documentation, webhooks, and API JSON responses use snake_case.**

Here's a breakdown:
- API Reference/Webhooks: Use snake\_case (e.g., `payment_status`).
- Node.js SDK (Internal Backend): Uses camelCase (e.g., `paymentStatus`).
- **API Responses (Frontend Perspective):** Responses received from the backend for **proxied `/v2/catalog/*` endpoints will contain `snake_case` keys**, as they directly reflect the Square API JSON response.

Example:
- API Reference/Webhook/JSON response: `payment_status`
- SDK/Node.js Internal Usage: `paymentStatus`
- Frontend receives from `/v2/catalog/*`: `{ "some_field": ... }`

## Square endpoints caveats:
Square's external API endpoints are often prefixed with `/v2/` (e.g., `https://connect.squareup.com/v2/catalog/list`). Our backend API Gateway reflects this structure for proxied catalog endpoints.

## API Endpoint Strategy

Our backend API uses a mixed strategy for endpoint paths:

1.  **OAuth & Specific Backend Routes:** Primarily use the `/api/*` prefix.
    - `/api/auth/connect/url`
    - `/api/auth/square/callback`
    - `/api/webhooks/square`
    - `/api/health`

2.  **Catalog Operations (Proxied):** Use the `/v2/catalog/*` prefix, mirroring Square's API structure.
    - `/v2/catalog/list`
    - `/v2/catalog/object`
    - `/v2/catalog/search`
    - `/v2/catalog/item/{id}` (Maps to Square's `/v2/catalog/object/{id}`)
    - `/v2/catalog/list-categories` (Convenience, maps to `/v2/catalog/list?types=CATEGORY`)
    - *This approach ensures the frontend interacts with paths that closely match the underlying Square API structure for catalog operations.* Frontend developers should refer to Square's Catalog API documentation for request/response formats for these endpoints.

3.  **Square API version handling**:
    - API header version (`Square-Version`) is consistently managed by the backend proxy for catalog calls (`2025-04-16`).
    - Internal SDK calls (e.g., in `square.js` for token exchange) also use the correct version header (`2025-04-16`).

4.  **Implementation**:
    - The `catalogHandlers.js` uses `axios` to directly call Square endpoints, forwarding authentication and ensuring correct headers (including the `Square-Version`).
    - The `oauthHandlers.js` and `square.js` service handle token exchange and client initialization using appropriate headers/SDK configurations (including the `Square-Version`).

## Square's usage of camelCase vs snake_case

The Square API uses camelCase for its Node.js SDK (used internally by the backend, especially in `square.js`), while the **API reference documentation, webhooks, and API JSON responses use snake_case.**

Here's a breakdown:
- API Reference/Webhooks: Use snake\_case (e.g., `payment_status`).
- Node.js SDK (Internal Backend): Uses camelCase (e.g., `paymentStatus`).
- **API Responses (Frontend Perspective):** Responses received from the backend for **proxied `/v2/catalog/*` endpoints will contain `snake_case` keys**, as they directly reflect the Square API JSON response.

Example:
- API Reference/Webhook/JSON response: `payment_status`
- SDK/Node.js Internal Usage: `paymentStatus`
- Frontend receives from `/v2/catalog/*`: `{ "some_field": ... }`

## Square endpoints caveats:
Square's external API endpoints are often prefixed with `/v2/` (e.g., `https://connect.squareup.com/v2/catalog/list`). Our backend API Gateway reflects this structure for proxied catalog endpoints.

## API Endpoint Strategy

Our backend API uses a mixed strategy for endpoint paths:

1.  **OAuth & Specific Backend Routes:** Primarily use the `/api/*` prefix.
    - `/api/auth/connect/url`
    - `/api/auth/square/callback`
    - `/api/webhooks/square`
    - `/api/health`

2.  **Catalog Operations (Proxied):** Use the `/v2/catalog/*` prefix, mirroring Square's API structure.
    - `/v2/catalog/list`
    - `/v2/catalog/object`
    - `/v2/catalog/search`
    - `/v2/catalog/item/{id}` (Maps to Square's `/v2/catalog/object/{id}`)
    - `/v2/catalog/list-categories` (Convenience, maps to `/v2/catalog/list?types=CATEGORY`)
    - *This approach ensures the frontend interacts with paths that closely match the underlying Square API structure for catalog operations.* Frontend developers should refer to Square's Catalog API documentation for request/response formats for these endpoints.

3.  **Square API version handling**:
    - API header version (`Square-Version`) is consistently managed by the backend proxy for catalog calls (`2025-04-16`).
    - Internal SDK calls (e.g., in `square.js` for token exchange) also use the correct version header (`2025-04-16`).

4.  **Implementation**:
    - The `catalogHandlers.js` uses `axios` to directly call Square endpoints, forwarding authentication and ensuring correct headers (including the `Square-Version`).
    - The `oauthHandlers.js` and `square.js` service handle token exchange and client initialization using appropriate headers/SDK configurations (including the `Square-Version`).