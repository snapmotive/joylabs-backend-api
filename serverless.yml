service: joylabs-backend-api-v3

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}
  memorySize: 256
  timeout: 30
  logRetentionInDays: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    SQUARE_REDIRECT_URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/${self:provider.stage}/api/auth/square/callback
    API_BASE_URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/${self:provider.stage}
    SQUARE_ENVIRONMENT: ${env:SQUARE_ENVIRONMENT, 'sandbox'}
    SQUARE_APPLICATION_ID: ${env:SQUARE_APPLICATION_ID, ''}
    SQUARE_APPLICATION_SECRET: ${env:SQUARE_APPLICATION_SECRET, ''}
    SQUARE_WEBHOOK_SIGNATURE_KEY: ${env:SQUARE_WEBHOOK_SIGNATURE_KEY, ''}
    SQUARE_CREDENTIALS_SECRET: ${env:SQUARE_CREDENTIALS_SECRET, 'joylabs/square-credentials-${self:provider.stage}'}
    MERCHANT_TABLE: ${self:service}-merchants-v3-${self:provider.stage}
    WEBHOOK_TABLE: ${self:service}-webhooks-v3-${self:provider.stage}
    CATEGORY_TABLE: ${self:service}-categories-v3-${self:provider.stage}
    PRODUCT_TABLE: ${self:service}-products-v3-${self:provider.stage}
    INVENTORY_TABLE: ${self:service}-inventory-v3-${self:provider.stage}
    SESSION_SECRET: ${env:SESSION_SECRET, 'joylabs-session-secret-${self:provider.stage}'}
    JWT_SECRET: ${env:JWT_SECRET, 'joylabs-jwt-secret-${self:provider.stage}'}
    ENABLE_RESPONSE_CACHE: true
    PRODUCTS_TABLE: joylabs-catalog-products-v3-${self:provider.stage}
    CATEGORIES_TABLE: joylabs-catalog-categories-v3-${self:provider.stage}
    USERS_TABLE: ${env:USERS_TABLE, 'joylabs-catalog-users-v3-${self:provider.stage}'}
    WEBHOOKS_TABLE: joylabs-catalog-webhooks-v3-${self:provider.stage}
    SESSIONS_TABLE: joylabs-sessions-v3-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:ListTables
      Resource:
        - !GetAtt ProductsTable.Arn
        - !GetAtt CategoriesTable.Arn
        - !GetAtt UsersTable.Arn
        - !GetAtt WebhooksTable.Arn
        - !GetAtt SessionsTable.Arn
        - !Join ['', [!GetAtt ProductsTable.Arn, '/index/*']]
        - !Join ['', [!GetAtt CategoriesTable.Arn, '/index/*']]
        - !Join ['', [!GetAtt UsersTable.Arn, '/index/*']]
        - !Join ['', [!GetAtt WebhooksTable.Arn, '/index/*']]
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
    - Effect: Allow
      Action:
        - lambda:ListFunctions
      Resource: '*'
    - Effect: Allow
      Action:
        - apigateway:GET
      Resource: 'arn:aws:apigateway:${self:provider.region}::/restapis'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:provider.environment.SQUARE_CREDENTIALS_SECRET}*
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"

# Define the layers
layers:
  dependencies:
    path: layers/dependencies
    name: ${self:service}-dependencies-${self:provider.stage}
    description: Common dependencies for ${self:service}
    compatibleRuntimes:
      - nodejs18.x
    retain: false
  square:
    path: layers/square
    name: ${self:service}-square-${self:provider.stage}
    description: Square API dependencies
    compatibleRuntimes:
      - nodejs18.x
    retain: false

# Package configuration
package:
  individually: true
  patterns:
    - 'src/**'
    - 'package.json'
    - '!node_modules/**'
    - '!layers/**'
    - '!.webpack/**'
    - '!tests/**'
    - '!coverage/**'
    - '!.git/**'
    - '!.github/**'
    - '!.vscode/**'
    - '!README.md'
    - '!.env*'
    - '!*.log'
    - '!package-lock.json'
    - '!node_modules/.cache/**'
    - '!node_modules/@aws-sdk/**'
    - '!node_modules/aws-sdk/**'
    - '!**/*.map'
    - '!**/*.test.js'
    - '!**/*.spec.js'
    - '!**/*.example.js'

custom:
  serverless-offline:
    httpPort: 3001
    websocketPort: 3002
    lambdaPort: 3003
    noPrependStageInUrl: true
    resourceRoutes: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
  allowedHeaders:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - X-Requested-With
    - Cookie
    - Set-Cookie
    - Cache-Control
  allowedMethods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowedOrigins:
    - '*'
  apiGateway:
    apiKeys:
      - name: joylabs-api-key-${self:provider.stage}
        description: JoyLabs API Key
    usagePlan:
      quota:
        limit: 5000
        period: DAY
      throttle:
        burstLimit: 50
        rateLimit: 25
    apiCaching:
      enabled: ${self:provider.stage, 'dev'} == 'production'
      ttlInSeconds: 300
      dataEncrypted: false
      perKeyInvalidation:
        requireAuthorization: true
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
        - express
        - axios
        - square
        - jsonwebtoken
        - joi
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

functions:
  api:
    handler: src/index.handler
    memorySize: 512
    layers:
      - {Ref: DependenciesLambdaLayer}
      - {Ref: SquareLambdaLayer}
    package:
      patterns:
        - 'src/index.js'
        - 'src/config/**'
        - 'src/middlewares/**'
        - 'src/models/**'
        - 'src/routes/**'
        - 'src/services/**'
        - 'src/utils/**'
        - '!src/**/*.test.js'
        - 'package.json'
        - '!node_modules/**'
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            allowCredentials: true
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            allowCredentials: true
          
  # Add separate function for Square OAuth callback with public access
  squareCallback:
    handler: src/oauthHandlers.squareCallback
    memorySize: 256
    layers:
      - {Ref: DependenciesLambdaLayer}
      - {Ref: SquareLambdaLayer}
    package:
      patterns:
        - 'src/oauthHandlers.js'
        - 'src/services/square.js'
        - 'src/services/user.js'
        - 'src/config/**'
        - 'src/utils/**'
        - '!src/**/*.test.js'
        - 'package.json'
        - '!node_modules/**'
    events:
      - http:
          path: /api/auth/square/callback
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            allowCredentials: true
      - http:
          path: /auth/success
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            allowCredentials: true
            
  # Add webhook handler for Square
  squareWebhook:
    handler: src/webhookHandlers.squareWebhook
    memorySize: 256
    layers:
      - {Ref: DependenciesLambdaLayer}
      - {Ref: SquareLambdaLayer}
    package:
      patterns:
        - 'src/webhookHandlers.js'
        - 'src/services/square.js'
        - 'src/services/webhook.js'
        - 'src/config/**'
        - 'src/utils/**'
        - '!src/**/*.test.js'
        - 'package.json'
        - '!node_modules/**'
    events:
      - http:
          path: /api/webhooks/square
          method: POST
          cors: true

resources:
  Conditions:
    IsNotProduction:
      Fn::Not:
        - Fn::Equals:
            - ${self:provider.stage}
            - 'production'
  Resources:
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: joylabs-sessions-v3-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
          
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
          - AttributeName: barcode
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SkuIndex
            KeySchema:
              - AttributeName: sku
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: BarcodeIndex
            KeySchema:
              - AttributeName: barcode
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NameIndex
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: square_merchant_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: SquareMerchantIndex
            KeySchema:
              - AttributeName: square_merchant_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Add Secrets Manager for Square credentials
    SquareCredentialsSecret:
      Type: AWS::SecretsManager::Secret
      Condition: IsNotProduction
      Properties:
        Name: ${self:provider.environment.SQUARE_CREDENTIALS_SECRET}
        Description: "Square API Credentials for ${self:provider.stage}"
        SecretString: ${param:SQUARE_CREDENTIALS, '{"applicationId":"","applicationSecret":""}'}

    # Webhooks table for Square event tracking
    WebhooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.WEBHOOKS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: event_type
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventTypeIndex
            KeySchema:
              - AttributeName: event_type
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # WebACL for API protection
    ApiWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: joylabs-webacl-v3-${self:provider.stage}
        Scope: REGIONAL
        DefaultAction:
          Allow: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: joylabs-webacl-v3-${self:provider.stage}
        Rules:
          - Name: AWSManagedRulesCommonRuleSet
            Priority: 0
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: AWSManagedRulesCommonRuleSet
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
          - Name: RateLimit
            Priority: 1
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RateLimit
            Statement:
              RateBasedStatement:
                Limit: 1000
                AggregateKeyType: IP
          - Name: GeoBlockHighRiskCountries
            Priority: 2
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: GeoBlockHighRiskCountries
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - CN
                  - RU
                  - KP
                  - IR
    
    # WAF association with API Gateway
    # Commenting out WebACLAssociation temporarily to allow deployment
    # WebACLAssociation:
    #   Type: AWS::WAFv2::WebACLAssociation
    #   Properties:
    #     ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGatewayRestApi}/stages/${self:provider.stage}
    #     WebACLArn: !GetAtt ApiWebAcl.Arn

    # CloudWatch Alarms for Security Monitoring
    FailedAuthAttemptsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: joylabs-v3-failed-auth-attempts-${self:provider.stage}
        AlarmDescription: Alert on high rate of failed authentication attempts
        Namespace: JoyLabs/Security
        MetricName: SecurityEvent_AuthFailure
        Dimensions:
          - Name: Environment
            Value: ${self:provider.stage}
        Statistic: Sum
        Period: 300 # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        
    FailedTokenRefreshAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: joylabs-v3-failed-token-refresh-${self:provider.stage}
        AlarmDescription: Alert on failed token refresh attempts
        Namespace: JoyLabs/Security
        MetricName: SecurityEvent_TokenRefresh
        Dimensions:
          - Name: Environment
            Value: ${self:provider.stage}
          - Name: Severity
            Value: WARN
        Statistic: Sum
        Period: 300 # 5 minutes
        EvaluationPeriods: 1
        Threshold: 3
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

    # Add CloudWatch Alarms for performance monitoring
    LambdaErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: joylabs-v3-lambda-errors-${self:provider.stage}
        AlarmDescription: Monitor for high error rate in Lambda functions
        Namespace: AWS/Lambda
        MetricName: Errors
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-api
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    ApiLatencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: joylabs-v3-api-latency-${self:provider.stage}
        AlarmDescription: Monitor for high API latency
        Namespace: AWS/ApiGateway
        MetricName: Latency
        Dimensions:
          - Name: ApiName
            Value: ${self:service}-${self:provider.stage}
        Statistic: Average
        Period: 60
        EvaluationPeriods: 5
        Threshold: 5000  # 5 seconds
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

    # DynamoDB Tables
    MerchantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-merchants-v3-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    WebhookTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-webhooks-v3-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: eventId-index
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dynamodb-local 