service: joylabs-backend-api-v3

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  dotenv:
    path: .env.production
    include:
      - NODE_ENV
      - API_BASE_URL
      - API_GATEWAY_URL
      - SQUARE_APPLICATION_ID
      - SQUARE_ENVIRONMENT
      - SQUARE_AUTH_URL
      - SQUARE_TOKEN_URL
      - SQUARE_CALLBACK_SCHEME
      - SQUARE_CALLBACK_PATH
      - STATES_TABLE
      - SQUARE_CREDENTIALS_SECRET
      - LOG_LEVEL
  statesTableName: ${self:service}-${self:provider.stage}-states
  squareCredentialsSecret: square-credentials-production
  squareCredentialsSecretArn: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:square-credentials-production-*
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: 
      forceExclude:
        - aws-sdk   # Exclude aws-sdk v2
    packager: 'npm'
    excludeFiles: '**/*.test.js'
    includeFiles:
      - src/**/*.js
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk # Ensure aws-sdk is removed before packaging
    entries:
      - src/index.js
      - src/catalogHandlers.js
      - src/webhookHandlers.js
      - src/oauthHandlers.js
  # Layer ARNs for referencing in functions
  layerArns:
    core: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-core-production:1
    apiDeps: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-api-deps-production:1
    catalogDeps: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-catalog-deps-production:1
    webhooksDeps: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-webhooks-deps-production:1
    oauthDeps: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-oauth-deps-production:1
    square: arn:aws:lambda:us-west-1:367823798065:layer:joylabs-backend-api-v3-layers-square-production:1

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs22.x
  region: us-west-1
  stage: ${opt:stage, 'production'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: production
    API_BASE_URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production
    API_GATEWAY_URL: https://gki8kva7e3.execute-api.us-west-1.amazonaws.com/production
    SQUARE_APPLICATION_ID: sq0idp-WFTYv3An7NPv6ovGFLld1Q
    SQUARE_ENVIRONMENT: production
    SQUARE_AUTH_URL: https://connect.squareup.com/oauth2/authorize
    SQUARE_TOKEN_URL: https://connect.squareup.com/oauth2/token
    SQUARE_CALLBACK_SCHEME: joylabs
    SQUARE_CALLBACK_PATH: square-callback
    STATES_TABLE: ${self:custom.statesTableName}
    SQUARE_CREDENTIALS_SECRET: square-credentials-production
    LOG_LEVEL: debug
  build:
    esbuild: false
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:CreateTable
            - dynamodb:DescribeTable
          Resource:
            - !GetAtt StatesTable.Arn
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-backend-api-v3-users-production
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-backend-api-v3-sessions-production
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-catalog-products-v3-production
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-catalog-categories-v3-production
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-backend-api-merchants-v3-production
            - arn:aws:dynamodb:us-west-1:*:table/joylabs-backend-api-webhooks-v3-production
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:us-west-1:*:secret:square-credentials-production
            - ${self:custom.squareCredentialsSecretArn}
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:us-west-1:*:log-group:/aws/lambda/joylabs-backend-api-v3-production*

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - '!node_modules/**'
    - '!layers/**'
    - '!.git/**'
    - '!.serverless/**'
    - '!test/**'
    - '!scripts/**'
    - '!joylabs-firebase/**'
    - '!unused-firebase-files/**'
    - '!*.test.js'
    - '!*.md'
    - '!package-lock.json'
    - '!node_modules/aws-sdk/**' 
    - '!**/node_modules/aws-sdk/**'
    - '!**/*.map'
    - 'src/**'

functions:
  api:
    handler: src/index.handler
    events:
      - http:
          path: /api/health
          method: get
          cors: true
      - http:
          path: /api/auth/connect/url
          method: get
          cors: true
      - http:
          path: /api/auth/register-state
          method: post
          cors: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
    layers:
      - ${self:custom.layerArns.core}
      - ${self:custom.layerArns.apiDeps}
      - ${self:custom.layerArns.square}
  
  catalog:
    handler: src/catalogHandlers.handler
    description: Dedicated Lambda function for handling catalog-related requests
    events:
      - http:
          path: /v2/catalog/list
          method: get
          cors: true
      - http:
          path: /v2/catalog/item/{id}
          method: get
          cors: true
      - http:
          path: /v2/catalog/search
          method: post
          cors: true
      - http:
          path: /v2/catalog/categories
          method: get
          cors: true
      - http:
          path: /v2/catalog/list-categories
          method: get
          cors: true
      # Legacy path support (for backward compatibility)
      - http:
          path: /api/catalog/list
          method: get
          cors: true
      - http:
          path: /api/catalog/item/{id}
          method: get
          cors: true
      - http:
          path: /api/catalog/search
          method: post
          cors: true
    layers:
      - ${self:custom.layerArns.core}
      - ${self:custom.layerArns.catalogDeps}
      - ${self:custom.layerArns.square}
  
  webhooks:
    handler: src/webhookHandlers.handler
    events:
      - http:
          path: /api/webhooks/square
          method: post
          cors: true
      - http:
          path: /api/webhooks/health
          method: get
          cors: true
    layers:
      - ${self:custom.layerArns.core}
      - ${self:custom.layerArns.webhooksDeps}
      - ${self:custom.layerArns.square}

  oauth:
    handler: src/oauthHandlers.handler
    events:
      - http:
          path: /api/auth/square/callback
          method: get
          cors: true
      - http:
          path: /api/auth/validate-token
          method: get
          cors: true
      - http:
          path: /api/auth/validate-token
          method: post
          cors: true
    environment:
      SQUARE_CREDENTIALS_SECRET: ${self:custom.squareCredentialsSecret}
    layers:
      - ${self:custom.layerArns.core}
      - ${self:custom.layerArns.oauthDeps}
      - ${self:custom.layerArns.square}

resources:
  Resources:
    StatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.statesTableName}
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true 